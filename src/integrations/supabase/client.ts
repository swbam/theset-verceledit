// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = "https://kzjnkqeosrycfpxjwhil.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Imt6am5rcWVvc3J5Y2ZweGp3aGlsIiwicm9sZSI6ImFub24iLCJpYXQiOjE3MTcxMzc2MDAsImV4cCI6MjAzMjcxMzYwMH0.gKiueE4GfBw-Y3XNuRU-rjSie2UHAQo_nXcKU4EQvTs";

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY, {
  auth: {
    persistSession: true,
    autoRefreshToken: true,
    detectSessionInUrl: true,
    flowType: 'pkce' // More secure authentication flow for mobile and SPA
  },
  realtime: {
    params: {
      eventsPerSecond: 10
    }
  },
  global: {
    headers: {
      'x-application-name': 'theset-client'
    },
    fetch: fetch // Explicitly provide the fetch implementation
  },
  db: {
    schema: 'public'
  }
});

// Log connection status
console.log('Supabase client initialized');

// Connection status tracking
let isConnected = false;
let reconnectAttempts = 0;
const MAX_RECONNECT_ATTEMPTS = 5;
const RECONNECT_INTERVAL = 3000; // 3 seconds

/**
 * Initialize realtime subscriptions
 */
function initializeRealtime() {
  try {
    reconnectAttempts++;
    console.log(`Initializing realtime connection (attempt ${reconnectAttempts})`);
    
    const channel = supabase
      .channel('schema-db-changes')
      .on('postgres_changes', { event: '*', schema: 'public' }, payload => {
        console.log('Realtime change received:', payload);
      })
      .subscribe(status => {
        if (status === 'SUBSCRIBED') {
          console.log('Successfully subscribed to realtime changes');
          isConnected = true;
          reconnectAttempts = 0; // Reset counter on successful connection
        } else if (status === 'CHANNEL_ERROR') {
          console.error('Error connecting to realtime channel');
          isConnected = false;
          handleReconnect();
        } else {
          console.log('Realtime channel status:', status);
        }
      });

    // Add reconnection handling
    channel.onError(error => {
      console.error('Realtime channel error:', error);
      isConnected = false;
      handleReconnect();
    });
    
    return channel;
  } catch (error) {
    console.error('Failed to set up realtime subscription:', error);
    isConnected = false;
    handleReconnect();
    return null;
  }
}

/**
 * Handle reconnection logic with exponential backoff
 */
function handleReconnect() {
  if (reconnectAttempts < MAX_RECONNECT_ATTEMPTS) {
    const delay = RECONNECT_INTERVAL * Math.pow(1.5, reconnectAttempts);
    console.log(`Attempting to reconnect in ${delay}ms (attempt ${reconnectAttempts}/${MAX_RECONNECT_ATTEMPTS})`);
    
    setTimeout(() => {
      initializeRealtime();
    }, delay);
  } else {
    console.error(`Failed to reconnect after ${MAX_RECONNECT_ATTEMPTS} attempts`);
  }
}

// Initialize realtime on client load
const realtimeChannel = initializeRealtime();
